#include <string>

{{data.desc}}
class {{data.name}}
{
    public:
    {% for field in data.fields %}
    /// Getter for {{field.name}}
    {{ field.type }} {{ field.name }}() const { return m_{{ field.name }}; }
    /// Setter for {{field.name}}
    {{ data.name }} & {{ field.name }}({{ field.type }} value) { m_{{ field.name }} = value; return *this; }
    {% endfor %}

    /// This function provides both serialization and deserialization.
    /// This is influenced by the boost serialization library.
    template <typename Archive> void serialize(Archive & archive)
    {
    {% for field in data.fields %}    archive & m_{{ field.name }}; 
    {% endfor %}}

    
    bool operator==(const {{ data.name}} & rhs) const
    {
        {% for field in data.fields %}if (m_{{ field.name }} != rhs.m_{{ field.name }}) return false;
        {% endfor %}return true;
    }

    bool operator!=(const {{ data.name}} & rhs) const
    {
        return !(*this==rhs);
    }

    private:
    {% for field in data.fields %} 
    {{field.desc}}
    {{ field.type }} m_{{ field.name }};
    {% endfor %}
};